{"remainingRequest":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/babel-loader/lib/index.js!/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/sekiguchikeita/Desktop/sinapse_prototype/src/utils/svg.js","dependencies":[{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/src/utils/svg.js","mtime":1598506599000},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/cache-loader/dist/cjs.js","mtime":1598501629025},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/babel-loader/lib/index.js","mtime":1598501423176},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1598501658396}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport * as d3 from 'd3';\nimport { approximatelyEquals } from \"./math\";\n\nfunction lineTo(g, x1, y1, x2, y2, lineWidth, strokeStyle, dash) {\n  var sta = [x1, y1];\n  var end = [x2, y2];\n  var lineGenerator = d3.line().x(function (d) {\n    return d[0];\n  }).y(function (d) {\n    return d[1];\n  });\n  var path = g.append('path'). // attr('stroke', strokeStyle).\n  attr('stroke', '#7CF8FD'). // attr('stroke', 'red').\n  attr('stroke-width', 3). // attr('fill', 'none').\n  // attr('fill', '#D1FDFF').\n  attr('d', lineGenerator([sta, end]));\n\n  if (dash) {\n    path.style('stroke-dasharray', dash.join(','));\n  }\n\n  return path;\n}\n\nfunction line2(g, x1, y1, x2, y2, startPosition, endPosition, lineWidth, strokeStyle, markered) {\n  var points = [];\n  var start = [x1, y1];\n  var end = [x2, y2];\n  var centerX = start[0] + (end[0] - start[0]) / 2;\n  var centerY = start[1] + (end[1] - start[1]) / 2;\n  var second;\n\n  var addVerticalCenterLine = function addVerticalCenterLine() {\n    var third = [centerX, second[1]];\n    var forth = [centerX, penult[1]];\n    points.push(third);\n    points.push(forth);\n  };\n\n  var addHorizontalCenterLine = function addHorizontalCenterLine() {\n    var third = [second[0], centerY];\n    var forth = [penult[0], centerY];\n    points.push(third);\n    points.push(forth);\n  };\n\n  var addHorizontalTopLine = function addHorizontalTopLine() {\n    points.push([second[0], start[1] - 50]);\n    points.push([penult[0], start[1] - 50]);\n  };\n\n  var addHorizontalBottomLine = function addHorizontalBottomLine() {\n    points.push([second[0], start[1] + 50]);\n    points.push([penult[0], start[1] + 50]);\n  };\n\n  var addVerticalRightLine = function addVerticalRightLine() {\n    points.push([start[0] + 80, second[1]]);\n    points.push([start[0] + 80, penult[1]]);\n  };\n\n  var addVerticalLeftLine = function addVerticalLeftLine() {\n    points.push([start[0] - 80, second[1]]);\n    points.push([start[0] - 80, penult[1]]);\n  };\n\n  var addSecondXPenultY = function addSecondXPenultY() {\n    points.push([second[0], penult[1]]);\n  };\n\n  var addPenultXSecondY = function addPenultXSecondY() {\n    points.push([penult[0], second[1]]);\n  };\n\n  switch (startPosition) {\n    case 'left':\n      second = [start[0] - 20, start[1]];\n      break;\n\n    case 'top':\n      second = [start[0], start[1] - 20];\n      break;\n\n    case 'bottom':\n      second = [start[0], start[1] + 20];\n      break;\n\n    default:\n      second = [start[0] + 20, start[1]];\n      break;\n  }\n\n  var penult = null;\n\n  switch (endPosition) {\n    case 'right':\n      penult = [end[0] + 20, end[1]];\n      break;\n\n    case 'top':\n      penult = [end[0], end[1] - 20];\n      break;\n\n    case 'bottom':\n      penult = [end[0], end[1] + 20];\n      break;\n\n    default:\n      penult = [end[0] - 20, end[1]];\n      break;\n  }\n\n  points.push(start);\n  points.push(second);\n  startPosition = startPosition || 'right';\n  endPosition = endPosition || 'left';\n  var direction = getDirection(x1, y1, x2, y2);\n\n  if (direction.indexOf('r') > -1) {\n    if (startPosition === 'right' || endPosition === 'left') {\n      if (second[0] > centerX) {\n        second[0] = centerX;\n      }\n\n      if (penult[0] < centerX) {\n        penult[0] = centerX;\n      }\n    }\n  }\n\n  if (direction.indexOf('d') > -1) {\n    if (startPosition === 'bottom' || endPosition === 'top') {\n      if (second[1] > centerY) {\n        second[1] = centerY;\n      }\n\n      if (penult[1] < centerY) {\n        penult[1] = centerY;\n      }\n    }\n  }\n\n  if (direction.indexOf('l') > -1) {\n    if (startPosition === 'left' || endPosition === 'right') {\n      if (second[0] < centerX) {\n        second[0] = centerX;\n      }\n\n      if (penult[0] > centerX) {\n        penult[0] = centerX;\n      }\n    }\n  }\n\n  if (direction.indexOf('u') > -1) {\n    if (startPosition === 'top' || endPosition === 'bottom') {\n      if (second[1] < centerY) {\n        second[1] = centerY;\n      }\n\n      if (penult[1] > centerY) {\n        penult[1] = centerY;\n      }\n    }\n  }\n\n  switch (direction) {\n    case 'lu':\n      {\n        if (startPosition === 'right') {\n          switch (endPosition) {\n            case 'top':\n            case 'right':\n              addSecondXPenultY();\n              break;\n\n            default:\n              {\n                addHorizontalCenterLine();\n                break;\n              }\n          }\n        } else if (startPosition === 'bottom') {\n          switch (endPosition) {\n            case 'top':\n              addVerticalCenterLine();\n              break;\n\n            default:\n              {\n                addPenultXSecondY();\n                break;\n              }\n          }\n        } else if (startPosition === 'top') {\n          switch (endPosition) {\n            case 'top':\n            case 'right':\n              addSecondXPenultY();\n              break;\n\n            default:\n              {\n                addHorizontalCenterLine();\n                break;\n              }\n          }\n        } else {\n          // startPosition is left\n          switch (endPosition) {\n            case 'top':\n            case 'right':\n              addVerticalCenterLine();\n              break;\n\n            default:\n              {\n                addPenultXSecondY();\n                break;\n              }\n          }\n        }\n\n        break;\n      }\n\n    case 'u':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'right':\n            {\n              break;\n            }\n\n          case 'top':\n            {\n              addSecondXPenultY();\n              break;\n            }\n\n          default:\n            {\n              addHorizontalCenterLine();\n              break;\n            }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n            addPenultXSecondY();\n            break;\n\n          default:\n            {\n              addVerticalRightLine();\n              break;\n            }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'left':\n            {\n              addPenultXSecondY();\n              break;\n            }\n\n          case 'right':\n            {\n              addHorizontalCenterLine();\n              break;\n            }\n\n          case 'top':\n            addVerticalRightLine();\n            break;\n\n          default:\n            {\n              break;\n            }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n            break;\n\n          default:\n            {\n              points.push([second[0], penult[1]]);\n              break;\n            }\n        }\n      }\n\n      break;\n\n    case 'ru':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'left':\n            {\n              addVerticalCenterLine();\n              break;\n            }\n\n          case 'top':\n            {\n              addSecondXPenultY();\n              break;\n            }\n\n          default:\n            {\n              addPenultXSecondY();\n              break;\n            }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'top':\n            {\n              addVerticalCenterLine();\n              break;\n            }\n\n          default:\n            {\n              addPenultXSecondY();\n              break;\n            }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'right':\n            {\n              addVerticalCenterLine();\n              break;\n            }\n\n          default:\n            {\n              addSecondXPenultY();\n              break;\n            }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left':\n          case 'top':\n            addSecondXPenultY();\n            break;\n\n          default:\n            {\n              addHorizontalCenterLine();\n              break;\n            }\n        }\n      }\n\n      break;\n\n    case 'l':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n          case 'top':\n            addHorizontalTopLine();\n            break;\n\n          default:\n            {\n              addHorizontalBottomLine();\n              break;\n            }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'left':\n            {\n              addHorizontalBottomLine();\n              break;\n            }\n\n          case 'right':\n            {\n              addSecondXPenultY();\n              break;\n            }\n\n          case 'top':\n            {\n              addVerticalCenterLine();\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'left':\n            {\n              addHorizontalTopLine();\n              break;\n            }\n\n          case 'right':\n            {\n              addSecondXPenultY();\n              break;\n            }\n\n          case 'top':\n            {\n              break;\n            }\n\n          default:\n            {\n              addVerticalCenterLine();\n              break;\n            }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left':\n            {\n              addHorizontalTopLine();\n              break;\n            }\n\n          case 'right':\n            {\n              break;\n            }\n\n          default:\n            {\n              addSecondXPenultY();\n              break;\n            }\n        }\n      }\n\n      break;\n\n    case 'r':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'left':\n            {\n              break;\n            }\n\n          case 'right':\n            {\n              addHorizontalTopLine();\n              break;\n            }\n\n          default:\n            {\n              addSecondXPenultY();\n              break;\n            }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'left':\n            {\n              addSecondXPenultY();\n              break;\n            }\n\n          case 'right':\n            {\n              addHorizontalBottomLine();\n              break;\n            }\n\n          case 'top':\n            {\n              addVerticalCenterLine();\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'left':\n            {\n              addPenultXSecondY();\n              break;\n            }\n\n          case 'right':\n            {\n              addHorizontalTopLine();\n              break;\n            }\n\n          case 'top':\n            {\n              break;\n            }\n\n          default:\n            {\n              addVerticalCenterLine();\n              break;\n            }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n          case 'top':\n            addHorizontalTopLine();\n            break;\n\n          default:\n            {\n              addHorizontalBottomLine();\n              break;\n            }\n        }\n      }\n\n      break;\n\n    case 'ld':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'left':\n            {\n              addHorizontalCenterLine();\n              break;\n            }\n\n          default:\n            {\n              addSecondXPenultY();\n              break;\n            }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'left':\n            {\n              addPenultXSecondY();\n              break;\n            }\n\n          case 'top':\n            {\n              addHorizontalCenterLine();\n              break;\n            }\n\n          default:\n            {\n              addSecondXPenultY();\n              break;\n            }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n          case 'top':\n            addPenultXSecondY();\n            break;\n\n          default:\n            {\n              addVerticalCenterLine();\n              break;\n            }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left':\n          case 'top':\n            addPenultXSecondY();\n            break;\n\n          case 'right':\n            {\n              addVerticalCenterLine();\n              break;\n            }\n\n          default:\n            {\n              addSecondXPenultY();\n              break;\n            }\n        }\n      }\n\n      break;\n\n    case 'd':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'left':\n            {\n              addHorizontalCenterLine();\n              break;\n            }\n\n          case 'right':\n            {\n              addPenultXSecondY();\n              break;\n            }\n\n          case 'top':\n            {\n              addSecondXPenultY();\n              break;\n            }\n\n          default:\n            {\n              addVerticalRightLine();\n              break;\n            }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n            addPenultXSecondY();\n            break;\n\n          case 'top':\n            {\n              break;\n            }\n\n          default:\n            {\n              addVerticalRightLine();\n              break;\n            }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'left':\n            {\n              addVerticalLeftLine();\n              break;\n            }\n\n          default:\n            {\n              addVerticalRightLine();\n              break;\n            }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left':\n            {\n              break;\n            }\n\n          case 'right':\n            {\n              addHorizontalCenterLine();\n              break;\n            }\n\n          case 'top':\n            {\n              addSecondXPenultY();\n              break;\n            }\n\n          default:\n            {\n              addVerticalLeftLine();\n              break;\n            }\n        }\n      }\n\n      break;\n\n    case 'rd':\n      {\n        if (startPosition === 'right' && endPosition === 'left') {\n          addVerticalCenterLine();\n        } else if (startPosition === 'right' && endPosition === 'bottom') {\n          addSecondXPenultY();\n        } else if (startPosition === 'right' && endPosition === 'top' || startPosition === 'right' && endPosition === 'right') {\n          addPenultXSecondY();\n        } else if (startPosition === 'bottom' && endPosition === 'left') {\n          addSecondXPenultY();\n        } else if (startPosition === 'bottom' && endPosition === 'right') {\n          addPenultXSecondY();\n        } else if (startPosition === 'bottom' && endPosition === 'top') {\n          addHorizontalCenterLine();\n        } else if (startPosition === 'bottom' && endPosition === 'bottom') {\n          addSecondXPenultY();\n        } else if (startPosition === 'top' && endPosition === 'left') {\n          addPenultXSecondY();\n        } else if (startPosition === 'top' && endPosition === 'right') {\n          addPenultXSecondY();\n        } else if (startPosition === 'top' && endPosition === 'top') {\n          addPenultXSecondY();\n        } else if (startPosition === 'top' && endPosition === 'bottom') {\n          addVerticalCenterLine();\n        } else if (startPosition === 'left' && endPosition === 'left') {\n          addSecondXPenultY();\n        } else if (startPosition === 'left' && endPosition === 'right') {\n          addHorizontalCenterLine();\n        } else if (startPosition === 'left' && endPosition === 'top') {\n          addHorizontalCenterLine();\n        } else if (startPosition === 'left' && endPosition === 'bottom') {\n          addSecondXPenultY();\n        }\n\n        break;\n      }\n  }\n\n  points.push(penult);\n  points.push(end);\n  var lines = [];\n  var paths = [];\n\n  for (var i = 0; i < points.length; i++) {\n    var source = points[i];\n    var destination = points[i + 1];\n    lines.push({\n      sourceX: source[0],\n      sourceY: source[1],\n      destinationX: destination[0],\n      destinationY: destination[1]\n    });\n    var finish = i === points.length - 2;\n\n    if (finish && markered) {\n      var path = arrowTo(g, source[0], source[1], destination[0], destination[1], lineWidth, strokeStyle);\n      paths.push(path);\n      break;\n    } else {\n      var _path = lineTo(g, source[0], source[1], destination[0], destination[1], lineWidth, strokeStyle);\n\n      paths.push(_path);\n    }\n\n    if (finish) {\n      break;\n    }\n  }\n\n  return {\n    lines: lines,\n    paths: paths\n  };\n}\n\nfunction arrowTo(g, x1, y1, x2, y2, lineWidth, strokeStyle) {\n  var path = lineTo(g, x1, y1, x2, y2, lineWidth, strokeStyle);\n  var id = 'arrow' + strokeStyle.replace('#', '');\n  g.append('marker').attr('id', id).attr('markerUnits', 'strokeWidth').attr('viewBox', '0 0 12 12').attr('refX', 9).attr('refY', 6).attr('markerWidth', 12).attr('markerHeight', 12).attr('orient', 'auto').append('path').attr('d', 'M2,2 L10,6 L2,10 L6,6 L2,2'). // attr('fill', strokeStyle);\n  attr('fill', '#7CF8FD'); // attr('fill', 'red');\n\n  path.attr('marker-end', 'url(#' + id + ')');\n  return path;\n}\n\nfunction getDirection(x1, y1, x2, y2) {\n  // Use approximatelyEquals to fix the problem of css position presicion\n  if (x2 < x1 && approximatelyEquals(y2, y1)) {\n    return 'l';\n  }\n\n  if (x2 > x1 && approximatelyEquals(y2, y1)) {\n    return 'r';\n  }\n\n  if (approximatelyEquals(x2, x1) && y2 < y1) {\n    return 'u';\n  }\n\n  if (approximatelyEquals(x2, x1) && y2 > y1) {\n    return 'd';\n  }\n\n  if (x2 < x1 && y2 < y1) {\n    return 'lu';\n  }\n\n  if (x2 > x1 && y2 < y1) {\n    return 'ru';\n  }\n\n  if (x2 < x1 && y2 > y1) {\n    return 'ld';\n  }\n\n  return 'rd';\n}\n\nexport { arrowTo, lineTo, getDirection, line2 };",{"version":3,"sources":["/Users/sekiguchikeita/Desktop/sinapse_prototype/src/utils/svg.js"],"names":["d3","approximatelyEquals","lineTo","g","x1","y1","x2","y2","lineWidth","strokeStyle","dash","sta","end","lineGenerator","line","x","d","y","path","append","attr","style","join","line2","startPosition","endPosition","markered","points","start","centerX","centerY","second","addVerticalCenterLine","third","forth","penult","push","addHorizontalCenterLine","addHorizontalTopLine","addHorizontalBottomLine","addVerticalRightLine","addVerticalLeftLine","addSecondXPenultY","addPenultXSecondY","direction","getDirection","indexOf","lines","paths","i","length","source","destination","sourceX","sourceY","destinationX","destinationY","finish","arrowTo","id","replace"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\nimport {approximatelyEquals} from './math';\n\nfunction lineTo(g, x1, y1, x2, y2, lineWidth, strokeStyle, dash) {\n  let sta = [x1, y1];\n  let end = [x2, y2];\n  let lineGenerator = d3.line().x(d => d[0]).y(d => d[1]);\n  let path = g.append('path').\n      // attr('stroke', strokeStyle).\n      attr('stroke', '#7CF8FD').\n      // attr('stroke', 'red').\n      attr('stroke-width', 3).\n      // attr('fill', 'none').\n    // attr('fill', '#D1FDFF').\n      attr('d', lineGenerator([sta, end]));\n  if (dash) {\n    path.style('stroke-dasharray', dash.join(','));\n  }\n  return path;\n}\n\nfunction line2(g, x1, y1, x2, y2, startPosition, endPosition, lineWidth,\n    strokeStyle, markered) {\n  let points = [];\n  let start = [x1, y1];\n  let end = [x2, y2];\n  let centerX = start[0] + (end[0] - start[0]) / 2;\n  let centerY = start[1] + (end[1] - start[1]) / 2;\n  let second;\n  let addVerticalCenterLine = function() {\n    let third = [centerX, second[1]];\n    let forth = [centerX, penult[1]];\n    points.push(third);\n    points.push(forth);\n  };\n  let addHorizontalCenterLine = function() {\n    let third = [second[0], centerY];\n    let forth = [penult[0], centerY];\n    points.push(third);\n    points.push(forth);\n  };\n  let addHorizontalTopLine = function() {\n    points.push([second[0], start[1] - 50]);\n    points.push([penult[0], start[1] - 50]);\n  };\n  let addHorizontalBottomLine = function() {\n    points.push([second[0], start[1] + 50]);\n    points.push([penult[0], start[1] + 50]);\n  };\n  let addVerticalRightLine = function() {\n    points.push([start[0] + 80, second[1]]);\n    points.push([start[0] + 80, penult[1]]);\n  };\n  let addVerticalLeftLine = function() {\n    points.push([start[0] - 80, second[1]]);\n    points.push([start[0] - 80, penult[1]]);\n  };\n  let addSecondXPenultY = function() {\n    points.push([second[0], penult[1]]);\n  };\n  let addPenultXSecondY = function() {\n    points.push([penult[0], second[1]]);\n  };\n  switch (startPosition) {\n    case 'left':\n      second = [start[0] - 20, start[1]];\n      break;\n    case 'top':\n      second = [start[0], start[1] - 20];\n      break;\n    case 'bottom':\n      second = [start[0], start[1] + 20];\n      break;\n    default:\n      second = [start[0] + 20, start[1]];\n      break;\n  }\n  let penult = null;\n  switch (endPosition) {\n    case 'right':\n      penult = [end[0] + 20, end[1]];\n      break;\n    case 'top':\n      penult = [end[0], end[1] - 20];\n      break;\n    case 'bottom':\n      penult = [end[0], end[1] + 20];\n      break;\n    default:\n      penult = [end[0] - 20, end[1]];\n      break;\n  }\n  points.push(start);\n  points.push(second);\n  startPosition = startPosition || 'right';\n  endPosition = endPosition || 'left';\n  let direction = getDirection(x1, y1, x2, y2);\n  if (direction.indexOf('r') > -1) {\n    if (startPosition === 'right' || endPosition === 'left') {\n      if (second[0] > centerX) {\n        second[0] = centerX;\n      }\n      if (penult[0] < centerX) {\n        penult[0] = centerX;\n      }\n    }\n  }\n  if (direction.indexOf('d') > -1) {\n    if (startPosition === 'bottom' || endPosition === 'top') {\n      if (second[1] > centerY) {\n        second[1] = centerY;\n      }\n      if (penult[1] < centerY) {\n        penult[1] = centerY;\n      }\n    }\n  }\n  if (direction.indexOf('l') > -1) {\n    if (startPosition === 'left' || endPosition === 'right') {\n      if (second[0] < centerX) {\n        second[0] = centerX;\n      }\n      if (penult[0] > centerX) {\n        penult[0] = centerX;\n      }\n    }\n  }\n  if (direction.indexOf('u') > -1) {\n    if (startPosition === 'top' || endPosition === 'bottom') {\n      if (second[1] < centerY) {\n        second[1] = centerY;\n      }\n      if (penult[1] > centerY) {\n        penult[1] = centerY;\n      }\n    }\n  }\n  switch (direction) {\n    case 'lu': {\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'top':\n          case 'right':\n            addSecondXPenultY();\n            break;\n          default: {\n            addHorizontalCenterLine();\n            break;\n          }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'top':\n            addVerticalCenterLine();\n            break;\n          default: {\n            addPenultXSecondY();\n            break;\n          }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'top':\n          case 'right':\n            addSecondXPenultY();\n            break;\n          default: {\n            addHorizontalCenterLine();\n            break;\n          }\n        }\n      } else {\n        // startPosition is left\n        switch (endPosition) {\n          case 'top':\n          case 'right':\n            addVerticalCenterLine();\n            break;\n          default: {\n            addPenultXSecondY();\n            break;\n          }\n        }\n      }\n      break;\n    }\n    case 'u':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'right': {\n            break;\n          }\n          case 'top': {\n            addSecondXPenultY();\n            break;\n          }\n          default: {\n            addHorizontalCenterLine();\n            break;\n          }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n            addPenultXSecondY();\n            break;\n          default: {\n            addVerticalRightLine();\n            break;\n          }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'left': {\n            addPenultXSecondY();\n            break;\n          }\n          case 'right': {\n            addHorizontalCenterLine();\n            break;\n          }\n          case 'top':\n            addVerticalRightLine();\n            break;\n          default: {\n            break;\n          }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n            break;\n          default: {\n            points.push([second[0], penult[1]]);\n            break;\n          }\n        }\n      }\n      break;\n    case 'ru':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'left': {\n            addVerticalCenterLine();\n            break;\n          }\n          case 'top': {\n            addSecondXPenultY();\n            break;\n          }\n          default: {\n            addPenultXSecondY();\n            break;\n          }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'top': {\n            addVerticalCenterLine();\n            break;\n          }\n          default: {\n            addPenultXSecondY();\n            break;\n          }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'right': {\n            addVerticalCenterLine();\n            break;\n          }\n          default: {\n            addSecondXPenultY();\n            break;\n          }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left':\n          case 'top':\n            addSecondXPenultY();\n            break;\n          default: {\n            addHorizontalCenterLine();\n            break;\n          }\n        }\n      }\n      break;\n    case 'l':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n          case 'top':\n            addHorizontalTopLine();\n            break;\n          default: {\n            addHorizontalBottomLine();\n            break;\n          }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'left': {\n            addHorizontalBottomLine();\n            break;\n          }\n          case 'right': {\n            addSecondXPenultY();\n            break;\n          }\n          case 'top': {\n            addVerticalCenterLine();\n            break;\n          }\n          default: {\n            break;\n          }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'left': {\n            addHorizontalTopLine();\n            break;\n          }\n          case 'right': {\n            addSecondXPenultY();\n            break;\n          }\n          case 'top': {\n            break;\n          }\n          default: {\n            addVerticalCenterLine();\n            break;\n          }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left': {\n            addHorizontalTopLine();\n            break;\n          }\n          case 'right': {\n            break;\n          }\n          default: {\n            addSecondXPenultY();\n            break;\n          }\n        }\n      }\n      break;\n    case 'r':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'left': {\n            break;\n          }\n          case 'right': {\n            addHorizontalTopLine();\n            break;\n          }\n          default: {\n            addSecondXPenultY();\n            break;\n          }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'left': {\n            addSecondXPenultY();\n            break;\n          }\n          case 'right': {\n            addHorizontalBottomLine();\n            break;\n          }\n          case 'top': {\n            addVerticalCenterLine();\n            break;\n          }\n          default: {\n            break;\n          }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'left': {\n            addPenultXSecondY();\n            break;\n          }\n          case 'right': {\n            addHorizontalTopLine();\n            break;\n          }\n          case 'top': {\n            break;\n          }\n          default: {\n            addVerticalCenterLine();\n            break;\n          }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n          case 'top':\n            addHorizontalTopLine();\n            break;\n          default: {\n            addHorizontalBottomLine();\n            break;\n          }\n        }\n      }\n      break;\n    case 'ld':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'left': {\n            addHorizontalCenterLine();\n            break;\n          }\n          default: {\n            addSecondXPenultY();\n            break;\n          }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'left': {\n            addPenultXSecondY();\n            break;\n          }\n          case 'top': {\n            addHorizontalCenterLine();\n            break;\n          }\n          default: {\n            addSecondXPenultY();\n            break;\n          }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n          case 'top':\n            addPenultXSecondY();\n            break;\n          default: {\n            addVerticalCenterLine();\n            break;\n          }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left':\n          case 'top':\n            addPenultXSecondY();\n            break;\n          case 'right': {\n            addVerticalCenterLine();\n            break;\n          }\n          default: {\n            addSecondXPenultY();\n            break;\n          }\n        }\n      }\n      break;\n    case 'd':\n      if (startPosition === 'right') {\n        switch (endPosition) {\n          case 'left': {\n            addHorizontalCenterLine();\n            break;\n          }\n          case 'right': {\n            addPenultXSecondY();\n            break;\n          }\n          case 'top': {\n            addSecondXPenultY();\n            break;\n          }\n          default: {\n            addVerticalRightLine();\n            break;\n          }\n        }\n      } else if (startPosition === 'bottom') {\n        switch (endPosition) {\n          case 'left':\n          case 'right':\n            addPenultXSecondY();\n            break;\n          case 'top': {\n            break;\n          }\n          default: {\n            addVerticalRightLine();\n            break;\n          }\n        }\n      } else if (startPosition === 'top') {\n        switch (endPosition) {\n          case 'left': {\n            addVerticalLeftLine();\n            break;\n          }\n          default: {\n            addVerticalRightLine();\n            break;\n          }\n        }\n      } else {\n        // left\n        switch (endPosition) {\n          case 'left': {\n            break;\n          }\n          case 'right': {\n            addHorizontalCenterLine();\n            break;\n          }\n          case 'top': {\n            addSecondXPenultY();\n            break;\n          }\n          default: {\n            addVerticalLeftLine();\n            break;\n          }\n        }\n      }\n      break;\n    case 'rd': {\n      if (startPosition === 'right' && endPosition === 'left') {\n        addVerticalCenterLine();\n      } else if (startPosition === 'right' && endPosition === 'bottom') {\n        addSecondXPenultY();\n      } else if (\n          (startPosition === 'right' && endPosition === 'top') ||\n          (startPosition === 'right' && endPosition === 'right')\n      ) {\n        addPenultXSecondY();\n      } else if (startPosition === 'bottom' && endPosition === 'left') {\n        addSecondXPenultY();\n      } else if (startPosition === 'bottom' && endPosition === 'right') {\n        addPenultXSecondY();\n      } else if (startPosition === 'bottom' && endPosition === 'top') {\n        addHorizontalCenterLine();\n      } else if (startPosition === 'bottom' && endPosition === 'bottom') {\n        addSecondXPenultY();\n      } else if (startPosition === 'top' && endPosition === 'left') {\n        addPenultXSecondY();\n      } else if (startPosition === 'top' && endPosition === 'right') {\n        addPenultXSecondY();\n      } else if (startPosition === 'top' && endPosition === 'top') {\n        addPenultXSecondY();\n      } else if (startPosition === 'top' && endPosition === 'bottom') {\n        addVerticalCenterLine();\n      } else if (startPosition === 'left' && endPosition === 'left') {\n        addSecondXPenultY();\n      } else if (startPosition === 'left' && endPosition === 'right') {\n        addHorizontalCenterLine();\n      } else if (startPosition === 'left' && endPosition === 'top') {\n        addHorizontalCenterLine();\n      } else if (startPosition === 'left' && endPosition === 'bottom') {\n        addSecondXPenultY();\n      }\n      break;\n    }\n  }\n  points.push(penult);\n  points.push(end);\n\n  let lines = [];\n  let paths = [];\n  for (let i = 0; i < points.length; i++) {\n    let source = points[i];\n    let destination = points[i + 1];\n    lines.push({\n      sourceX: source[0],\n      sourceY: source[1],\n      destinationX: destination[0],\n      destinationY: destination[1],\n    });\n    let finish = i === points.length - 2;\n    if (finish && markered) {\n      let path = arrowTo(g, source[0], source[1], destination[0],\n          destination[1], lineWidth, strokeStyle);\n      paths.push(path);\n      break;\n    } else {\n      let path = lineTo(g, source[0], source[1], destination[0], destination[1],\n          lineWidth, strokeStyle);\n      paths.push(path);\n    }\n    if (finish) {\n      break;\n    }\n  }\n  return {lines, paths};\n}\n\nfunction arrowTo(g, x1, y1, x2, y2, lineWidth, strokeStyle) {\n  let path = lineTo(g, x1, y1, x2, y2, lineWidth, strokeStyle);\n  const id = 'arrow' + strokeStyle.replace('#', '');\n  g.append('marker').\n      attr('id', id).\n      attr('markerUnits', 'strokeWidth').\n      attr('viewBox', '0 0 12 12').\n      attr('refX', 9).\n      attr('refY', 6).\n      attr('markerWidth', 12).\n      attr('markerHeight', 12).\n      attr('orient', 'auto').\n      append('path').\n      attr('d', 'M2,2 L10,6 L2,10 L6,6 L2,2').\n      // attr('fill', strokeStyle);\n      attr('fill', '#7CF8FD');\n      // attr('fill', 'red');\n  path.attr('marker-end', 'url(#' + id + ')');\n  return path;\n}\n\nfunction getDirection(x1, y1, x2, y2) {\n  // Use approximatelyEquals to fix the problem of css position presicion\n  if (x2 < x1 && approximatelyEquals(y2, y1)) {\n    return 'l';\n  }\n  if (x2 > x1 && approximatelyEquals(y2, y1)) {\n    return 'r';\n  }\n  if (approximatelyEquals(x2, x1) && y2 < y1) {\n    return 'u';\n  }\n  if (approximatelyEquals(x2, x1) && y2 > y1) {\n    return 'd';\n  }\n  if (x2 < x1 && y2 < y1) {\n    return 'lu';\n  }\n  if (x2 > x1 && y2 < y1) {\n    return 'ru';\n  }\n  if (x2 < x1 && y2 > y1) {\n    return 'ld';\n  }\n  return 'rd';\n}\n\nexport {\n  arrowTo,\n  lineTo,\n  getDirection,\n  line2,\n};\n"]}]}
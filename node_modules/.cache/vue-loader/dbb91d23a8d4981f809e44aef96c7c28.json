{"remainingRequest":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sekiguchikeita/Desktop/sinapse_prototype/src/components/NodeDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/src/components/NodeDialog.vue","mtime":1598506599000},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/cache-loader/dist/cjs.js","mtime":1598501629025},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/babel-loader/lib/index.js","mtime":1598501423176},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/cache-loader/dist/cjs.js","mtime":1598501629025},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/vue-loader/lib/index.js","mtime":1598501639569}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport '../assets/modal.css';\n\nexport default {\n  props: {\n    visible: {\n      type: Boolean,\n      default: false,\n    },\n    node: {\n      type: Object,\n      default: null,\n    },\n  },\n  data: function() {\n    return {\n      nodeForm: {id: null, thumbnail: null, url:null, name: null, summary: null},\n      // nodeForm: {name: null, id: null, type: null, approver: []},\n      // approvers: [{id: 1, name: 'Joyce'}, {id: 2, name: 'Allen'}, {id: 3, name: 'Teresa'}],\n    };\n  },\n  methods: {\n    handleClickSaveNode() {\n      this.$emit('update:node', Object.assign(this.node, {\n        name: this.nodeForm.name,\n        thumbnail: this.nodeForm.thumbnail,\n        summary: this.nodeForm.summary,\n        // approvers: [Object.assign({}, this.nodeForm.approver)],\n      }));\n      this.$emit('update:visible', false);\n    },\n    handleClickCancelSaveNode() {\n      this.$emit('update:visible', false);\n    },\n    handleChangeApprover(e) {\n      // this.nodeForm.approver = this.approvers.filter(i => i.id === parseInt(e.target.value))[0];\n      this.nodeForm.summary = this.approvers.filter(i => i.id === parseInt(e.target.value))[0];\n    },\n  },\n  watch: {\n    node: {\n      immediate: true,\n      handler(val) {\n        if (!val) { return; }\n        this.nodeForm.id = val.id;\n        this.nodeForm.thumbnail = val.thumbnail;\n        this.nodeForm.url = val.url;\n        this.nodeForm.name = val.name;\n        this.nodeForm.summary = val.summary;\n        // if (val.approvers && val.approvers.length > 0) {\n        //   this.nodeForm.approver = val.approvers[0];\n        // }\n      },\n    },\n  },\n};\n",{"version":3,"sources":["NodeDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NodeDialog.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <div class=\"modal\" v-if=\"visible\">\n            <div class=\"header\">\n                <span>Edit</span>\n            </div>\n            <div class=\"body\">\n                <!-- <label for=\"thumbnail\">image(thumbnail)</label>\n                <input id=\"thumbnail\" v-model=\"nodeForm.thumbnail\"/> -->\n                <div class=\"thumbnail\" id=\"thumbnail\">\n                  <img v-bind:src=\"nodeForm.thumbnail\" alt=\"\">\n                </div>\n                <label for=\"approver\">URL</label>\n                <input class=\"form-control\" id=\"name\" v-model=\"nodeForm.url\"/>\n                <label for=\"name\">Title(Name)</label>\n                <input class=\"form-control\" id=\"title\" v-model=\"nodeForm.name\"/>\n                <!-- <select class=\"form-control\" id=\"thumbnail\" v-model=\"nodeForm.thumbnail\">\n                    <option :key=\"'node-thumbnail-' + item.id\" :value=\"item.id\"\n                            v-for=\"item in [ { name: 'Start', id: 'start' }, { name: 'End', id: 'end' }, { name: 'Operation', id: 'operation' } ]\"\n                    >\n                        {{item.name}}\n                    </option>\n                </select> -->\n                <label for=\"approver\">Summary(Approver)</label>\n                <input class=\"form-control\" id=\"approver\" v-model=\"nodeForm.summary\"/>\n                <!-- <textarea class=\"form-control\" id=\"approver\" v-model=\"nodeForm.summary\"></textarea> -->\n                <!-- <select class=\"form-control\" id=\"approver\" :value=\"nodeForm.approver.id\"\n                        @change=\"handleChangeApprover($event)\">\n                    <option :value=\"item.id\" :key=\"'approver-' + item.id\" v-for=\"item in approvers\">\n                        {{item.name}}\n                    </option>\n                </select> -->\n            </div>\n            <div class=\"footer\">\n                <button @click=\"handleClickCancelSaveNode\">Cancel</button>\n                <button @click=\"handleClickSaveNode\">Ok</button>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n  import '../assets/modal.css';\n\n  export default {\n    props: {\n      visible: {\n        type: Boolean,\n        default: false,\n      },\n      node: {\n        type: Object,\n        default: null,\n      },\n    },\n    data: function() {\n      return {\n        nodeForm: {id: null, thumbnail: null, url:null, name: null, summary: null},\n        // nodeForm: {name: null, id: null, type: null, approver: []},\n        // approvers: [{id: 1, name: 'Joyce'}, {id: 2, name: 'Allen'}, {id: 3, name: 'Teresa'}],\n      };\n    },\n    methods: {\n      handleClickSaveNode() {\n        this.$emit('update:node', Object.assign(this.node, {\n          name: this.nodeForm.name,\n          thumbnail: this.nodeForm.thumbnail,\n          summary: this.nodeForm.summary,\n          // approvers: [Object.assign({}, this.nodeForm.approver)],\n        }));\n        this.$emit('update:visible', false);\n      },\n      handleClickCancelSaveNode() {\n        this.$emit('update:visible', false);\n      },\n      handleChangeApprover(e) {\n        // this.nodeForm.approver = this.approvers.filter(i => i.id === parseInt(e.target.value))[0];\n        this.nodeForm.summary = this.approvers.filter(i => i.id === parseInt(e.target.value))[0];\n      },\n    },\n    watch: {\n      node: {\n        immediate: true,\n        handler(val) {\n          if (!val) { return; }\n          this.nodeForm.id = val.id;\n          this.nodeForm.thumbnail = val.thumbnail;\n          this.nodeForm.url = val.url;\n          this.nodeForm.name = val.name;\n          this.nodeForm.summary = val.summary;\n          // if (val.approvers && val.approvers.length > 0) {\n          //   this.nodeForm.approver = val.approvers[0];\n          // }\n        },\n      },\n    },\n  };\n</script>\n"]}]}
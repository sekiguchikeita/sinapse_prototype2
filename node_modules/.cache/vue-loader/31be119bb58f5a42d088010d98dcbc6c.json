{"remainingRequest":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sekiguchikeita/Desktop/sinapse_prototype/src/views/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/src/views/App.vue","mtime":1598506599000},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/cache-loader/dist/cjs.js","mtime":1598501629025},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/babel-loader/lib/index.js","mtime":1598501423176},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/cache-loader/dist/cjs.js","mtime":1598501629025},{"path":"/Users/sekiguchikeita/Desktop/sinapse_prototype/node_modules/vue-loader/lib/index.js","mtime":1598501639569}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable no-unused-vars */\n\nimport ConnectionDialog from \"../components/ConnectionDialog\";\nimport NodeDialog from \"../components/NodeDialog\";\nimport Flowchart from \"../components/flowchart/Flowchart\";\nimport * as d3 from \"d3\";\nimport { roundTo20 } from \"../utils/math\";\n\nexport default {\n  components: {\n    ConnectionDialog,\n    NodeDialog,\n    Flowchart,\n  },\n  data: function () {\n    return {\n      nodes: [\n        {\n          id: 1,\n          x: 200,\n          y: 50,\n          thumbnail: \"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DDocker%25E3%2581%25A8%25E3%2581%25AF%25E3%2581%25A9%25E3%2581%2586%25E3%2581%2584%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2582%25E3%2581%25AE%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%25E3%2580%2581%25E3%2582%2581%25E3%2581%25A1%25E3%2582%2583%25E3%2581%258F%25E3%2581%25A1%25E3%2582%2583%25E4%25B8%2581%25E5%25AF%25A7%25E3%2581%25AB%25E8%25AA%25AC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3Da74a6782c81bee821aa421a1037a1cc0&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540SatoshiSobue%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Dca9d81597f6bcfd55d58a95dc4c5f445&blend-align=center%2Cmiddle&blend-mode=normal&s=6d406ff15d17893a52ab77ba3ebd9d33\",\n          url: 'https://qiita.com/SatoshiSobue/items/a612ebbb3a9242c09db5',\n          name: \"Dockerとはどういったものなのか、めちゃくちゃ丁寧に説明してみる - Qiita\",\n          summary: \"仮想化などDockerの周辺知識も含めて丁寧に解説されている。\",\n        },\n        {\n          id: 2,\n          x: 200,\n          y: 300,\n          thumbnail: \"https://res.cloudinary.com/practicaldev/image/fetch/s--Zm43GYiy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e4jmzv9o1ivd3yz2kj8a.png\",\n          url: 'https://dev.to/mizuki04/tips-docker-5bfj',\n          name: \"[Tips] 中銀カプセルタワービル=Docker説 - DEV\",\n          summary: \"Dockerの概要が面白い例えで紹介されている。イメージをつかめる。\t\",\n        },\n        // {\n        //   id: 3,\n        //   x: 340,\n        //   y: 130,\n        //   name: \"Custom size\",\n        //   thumbnail: \"operation\",\n        //   approvers: [{ id: 1, name: \"Joyce\" }],\n        //   // width: 120,\n        //   // height: 40,\n        // },\n        {\n          id: 4,\n          x: 50,\n          y: 700,\n          thumbnail: \"https://img-a.udemycdn.com/course/480x270/3207931_c941.jpg\",\n          url: 'https://www.udemy.com/course/aidocker/',\n          name: \"米国AI開発者がゼロから教えるDocker講座\",\n          // approvers: [{ id: 2, name: \"Allen\" }],\n          summary: \"インプットしているだけではわからないので、手を動かして覚える。過去一わかりやすい動画。\t\",\n        },\n        {\n          id: 5,\n          x: 400,\n          y: 700,\n          thumbnail: \"https://i.ytimg.com/vi/Fq1PH0Gwi8I/hqdefault.jpg\",\n          url: 'https://www.youtube.com/watch?v=Fq1PH0Gwi8I',\n          name: \"【rails環境構築】docker + rails + mysql で環境構築（初心者でも30分で完了！）\",\n          // approvers: [{ id: 3, name: \"Teresa\" }],\n          summary: \"無料がいい方はこちら。\t\",\n        },\n      ],\n      connections: [\n        {\n          // positionは矢印がつながっているコネクターの位置っぽい\n          source: { id: 1, position: \"bottom\" },\n          destination: { id: 2, position: \"top\" },\n          id: 1,\n          type: \"pass\",\n          name: \"たとえ話でイメージをつかむ\"\n        },\n        {\n          source: { id: 2, position: \"bottom\" },\n          destination: { id: 4, position: \"top\" },\n          id: 2,\n          type: \"pass\",\n          name: \"実際に手を動かす\"\n        },\n        {\n          source: { id: 2, position: \"bottom\" },\n          destination: { id: 5, position: \"top\" },\n          id: 3,\n          type: \"pass\",\n          name: \"実際に手を動かす\"\n        },\n        // {\n        //   source: { id: 5, position: \"bottom\" },\n        //   destination: { id: 4, position: \"bottom\" },\n        //   id: 4,\n        //   type: \"reject\",\n        // },\n        // {\n        //   source: { id: 1, position: \"top\" },\n        //   destination: { id: 3, position: \"left\" },\n        //   id: 5,\n        //   type: \"pass\",\n        // },\n        // {\n        //   source: { id: 3, position: \"right\" },\n        //   destination: { id: 2, position: \"top\" },\n        //   id: 6,\n        //   type: \"pass\",\n        // },\n      ],\n      nodeForm: { target: null },\n      connectionForm: { target: null, operation: null },\n      nodeDialogVisible: false,\n      connectionDialogVisible: false,\n    };\n  },\n  async mounted() {},\n  methods: {\n    handleDblClick(position) {\n      this.$refs.chart.add({\n        id: +new Date(),\n        x: 10,\n        y: 10,\n        thumbnail: 'https://placehold.jp/150x100.png',\n        url: '',\n        name: 'Title',\n        summary: 'Summary',\n      });\n    },\n    async handleChartSave(nodes, connections) {\n      // axios.post(url, {nodes, connection}).then(resp => {\n      //   this.nodes = resp.nodes;\n      //   this.connections = resp.connections;\n      //   // Flowchart will refresh after this.nodes and this.connections changed\n      // });\n    },\n    handleEditNode(node) {\n      this.nodeForm.target = node;\n      this.nodeDialogVisible = true;\n    },\n    handleEditConnection(connection) {\n      this.connectionForm.target = connection;\n      this.connectionDialogVisible = true;\n    },\n    render: function (g, node, isSelected) {\n      node.width = node.width || 400;\n      node.height = node.height || 200;\n      let borderColor = isSelected ? \"#666666\" : \"#bbbbbb\";\n\n      // // バイト数カウント関数を定義\n      // String.prototype.bytes = function () {\n      //   return(encodeURIComponent(this).replace(/%../g,\"x\").length);\n      // }\n\n      // function leftLinebreak(array){\n      //   let string = \"\";\n      //   array.forEach((t, i) =>{\n      //     string += `<tspan y=\"${i}em\" x=\"0em\">${t}</tspan>`;\n      //     string += `<tspan y=\"${i}em\" x=\"0em\">${t}</tspan>`;\n      //   });\n      //   return string;\n      // }\n\n      // image\n      g.append('foreignObject')\n        .attr(\"x\", node.x)\n        .attr(\"y\", node.y)\n        .style(\"width\", node.width * 3 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .append('xhtml:div')\n        .style(\"width\", node.width * 3 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        // .attr(\"class\", \"imgaaa\")\n        // .style(\"background-image\", \"url('https://res.cloudinary.com/practicaldev/image/fetch/s--Zm43GYiy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e4jmzv9o1ivd3yz2kj8a.png')\")\n        .style(\"background-image\", `url(${node.thumbnail})`)\n        .style(\"background-position\", \"center center\")\n        .style(\"background-size\", \"cover\")\n        .style(\"background-repeat\", \"no-repeat\")\n        .style(\"border-radius\", \"6px 0 0 0\")\n        .style(\"box-sizing\", \"border-box\")\n        // .style(\"border-top\", \"1px solid #7CF8FD\")\n        // .style(\"border-left\", \"1px solid #7CF8FD\")\n        .style(\"border-top\", \"1px solid white\")\n        .style(\"border-left\", \"1px solid white\")\n        // .style(\"background-color\", \"red\")\n        // .append('img')\n        // .attr('src', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Zm43GYiy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e4jmzv9o1ivd3yz2kj8a.png')\n        // .style(\"width\", node.width / 2 + \"px\")\n        // .style(\"height\", node.height / 2 + \"px\")\n        // .text(() => node.name)\n\n      // g.append(\"image\")\n      //   .attr(\"x\", node.x)\n      //   .attr(\"y\", node.y)\n      //   .attr('xlink:href', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Zm43GYiy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e4jmzv9o1ivd3yz2kj8a.png')\n      //   .attr(\"preserveAspectRatio\", \"none\")\n      //   // .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n      //   .style(\"width\", node.width / 2 + \"px\")\n      //   .style(\"height\", node.height / 2 + \"px\")\n\n        //   .attr(\"stroke\", borderColor)\n        //   .attr(\"class\", \"title\")\n        //   .style(\"height\", \"20px\")\n        //   .style(\"fill\", \"#f1f3f4\")\n        //   .style(\"stroke-width\", \"1px\")\n        //   .style(\"width\", node.width + \"px\");\n        // g.append(\"text\")\n        //   .attr(\"x\", node.x + 4)\n        //   .attr(\"y\", node.y + 15)\n        //   .attr(\"class\", \"unselectable\")\n        //   .text(() => node.name)\n        //   .each(function wrap() {\n        //     let self = d3.select(this),\n        //       textLength = self.node().getComputedTextLength(),\n        //       text = self.text();\n        //     while (textLength > node.width - 2 * 4 && text.length > 0) {\n        //       text = text.slice(0, -1);\n        //       self.text(text + \"...\");\n        //       textLength = self.node().getComputedTextLength();\n        //     }\n        // });\n\n      // title\n      // g.append(\"rect\")\n      //   .attr(\"x\", node.x + node.width * 3 / 8)\n      //   .attr(\"y\", node.y)\n      //   .attr(\"stroke\", borderColor)\n      //   .attr(\"class\", \"title\")\n      //   .style(\"height\", node.height / 2 + \"px\")\n      //   .style(\"fill\", \"#f1f3f4\")\n      //   .style(\"fill\", \"#3F3F3F\")\n      //   .style(\"stroke-width\", \"1px\")\n      //   .style(\"width\", node.width * 5 / 8 + \"px\")\n\n      g.append('foreignObject')\n        .attr(\"x\", node.x + node.width * 3 / 8)\n        .attr(\"y\", node.y)\n        .attr(\"class\", \"title\")\n        .style(\"width\", node.width * 5 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .append('xhtml:div')\n        // .append('p')\n        .style(\"width\", node.width * 5 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        // .style(\"background-color\", \"red\")\n        .style(\"background-color\", \"#3F3F3F\")\n        .style(\"border-radius\", \"0 6px 0 0\")\n        .style(\"box-sizing\", \"border-box\")\n        // .style(\"border-top\", \"1px solid #7CF8FD\")\n        // .style(\"border-right\", \"1px solid #7CF8FD\")\n        .style(\"border-top\", \"1px solid white\")\n        .style(\"border-right\", \"1px solid white\")\n\n      g.append('foreignObject')\n        .attr(\"x\", node.x + node.width * 3 / 8)\n        .attr(\"y\", node.y)\n        .attr(\"class\", \"unselectable\")\n        .style(\"width\", node.width * 5 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .style(\"display\", \"table\")\n        .append('xhtml:p')\n        // .append('p')\n        .style(\"display\", \"table-cell\")\n        .style(\"vertical-align\", \"middle\")\n        .style(\"width\", node.width * 5 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .style(\"box-sizing\", \"border-box\")\n        .style(\"padding\", \"4px 8px 4px 8px\")\n        .style(\"color\", \"white\")\n        .style(\"font-weight\", \"bold\")\n        .style(\"margin\", 0)\n        // .style(\"word-wrap\", \"break-word\")\n        .style(\"overflow-wrap\", \"break-word\")\n        // .style(\"color\", \"red\")\n        // .html('test test test   test test testtesttesttesttesttesttesttest')\n        .text(() => node.name)\n\n      // Wrap text in a rectangle.\n      // d3plus.textwrap()\n      //   .container(d3.select(\"#rectWrap\"))\n      //   .draw();\n\n      // let textArray = []\n      // let summary = g.append(\"text\")\n      //   .attr(\"x\", node.x + node.width / 2 + 4)\n      //   .attr(\"y\", node.y + 20)\n      //   .attr(\"class\", \"unselectable\")\n      //   .text(() => node.name)\n      //   .each(function wrap() {\n      //     let self = d3.select(this),\n      //       textLength = self.node().getComputedTextLength(),\n      //       text = self.text();\n      //       console.log('bytes: ' + text.bytes());\n      //       textArray = []\n      //       let slicedText\n      //     while (text.bytes() > 16 && text.length > 0) {\n      //       slicedText = text.slice(0, 16);\n      //       textArray.push(text.slice(0, 16));\n      //       text = text.slice(16);\n      //       console.log('textArray: ' + textArray);\n      //       console.log('textArray.length: ' + textArray.length);\n      //       console.log('text: ' + text);\n      //       // self.text(text + \"...\");\n      //       // textLength = self.node().getComputedTextLength();\n      //     }\n      //     // while (textLength > node.width / 2 - 2 * 4 && text.length > 0) {\n      //     //   text = text.slice(0, -1);\n      //     //   self.text(text + \"...\");\n      //     //   textLength = self.node().getComputedTextLength();\n      //     // }\n      //   }\n      //   ).html(leftLinebreak(textArray))\n      //   // ).html('<foreignObject><p>テスト</p></foreignObject>')\n      //   // summary.html(leftLinebreak(textArray))\n\n      // body\n      // if (node.id === 3) {\n      //   let body = g.append(\"ellipse\").attr(\"class\", \"body\");\n      //   body.attr(\"cx\", node.x + node.width / 2);\n      //   body.attr(\"cy\", node.y + node.height / 2);\n      //   body.attr(\"rx\", node.width / 2);\n      //   body.attr(\"ry\", node.height / 2);\n      //   body.style(\"fill\", \"white\");\n      //   body.style(\"stroke-width\", \"1px\");\n      //   body.classed(node.thumbnail, true);\n      //   body.attr(\"stroke\", borderColor);\n      // } else {\n      //   let body = g.append(\"rect\").attr(\"class\", \"body\");\n      //   body\n      //     .style(\"width\", node.width + \"px\")\n      //     .style(\"fill\", \"white\")\n      //     .style(\"stroke-width\", \"1px\")\n      //     .style(\"fill\", \"#3F3F3F\")\n      //   // if (node.type !== \"start\" && node.type !== \"end\") {\n      //     body\n      //       .attr(\"x\", node.x)\n      //       .attr(\"y\", node.y + node.height / 2)\n      //       // .style(\"height\", roundTo20(node.height / 2  - 20) + \"px\");\n      //       .style(\"height\", node.height / 2 + \"px\")\n      //   // } else {\n      //     // body\n      //     //   .attr(\"x\", node.x)\n      //     //   .attr(\"y\", node.y)\n      //     //   .classed(node.type, true)\n      //     //   .attr(\"rx\", 30);\n      //     // body.style(\"height\", roundTo20(node.height) + \"px\");\n      //   // }\n      //   body.attr(\"stroke\", borderColor);\n      // // }\n      g.append('foreignObject')\n        .attr(\"x\", node.x)\n        .attr(\"y\", node.y + node.height / 2)\n        // .attr(\"class\", \"body\")\n        .style(\"width\", node.width + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .append('xhtml:div')\n        // .append('p')\n        .style(\"width\", node.width + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        // .style(\"margin\", 0)\n        .style(\"background-color\", \"#707070\")\n        // .style(\"border-radius\", \"0 4px 0 0\")\n        .style(\"box-sizing\", \"border-box\")\n        .style(\"border-radius\", \"0 0 6px 6px\")\n        // .style(\"border-top\", \"3px solid #6A6A6A\")\n        // .style(\"border-bottom\", \"1px solid #7CF8FD\")\n        // .style(\"border-right\", \"1px solid #7CF8FD\")\n        // .style(\"border-left\", \"1px solid #7CF8FD\")\n        .style(\"border-bottom\", \"1px solid white\")\n        .style(\"border-right\", \"1px solid white\")\n        .style(\"border-left\", \"1px solid white\")\n\n\n      // body text\n      // let text = node.summary\n        // node.type === \"start\"\n        //   ? \"Start\"\n        //   : node.type === \"end\"\n        //   ? \"End\"\n        //   : !node.approvers || node.approvers.length === 0\n        //   ? \"No approver\"\n        //   : node.approvers.length > 1\n        //   ? `${node.approvers[0].name + \"...\"}`\n        //   : node.approvers[0].name;\n      // let bodyTextY;\n      // if (node.type !== \"start\" && node.type !== \"end\") {\n        // if (node.id === 3) {\n        //   bodyTextY = node.y + 25;\n        // } else {\n          // bodyTextY = node.y + 65 + roundTo20(node.height - 20) / 2;\n        // }\n      // } else {\n      //   bodyTextY = node.y + 5 + roundTo20(node.height) / 2;\n      // }\n\n      g.append('foreignObject')\n        .attr(\"x\", node.x)\n        .attr(\"y\", node.y + node.height / 2)\n        .attr(\"class\", \"unselectable\")\n        .style(\"width\", node.width + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .append('xhtml:p')\n        // .append('p')\n        .style(\"width\", node.width + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .style(\"box-sizing\", \"border-box\")\n        .style(\"padding\", \"4px 8px 4px 8px\")\n        .style(\"color\", \"white\")\n        .style(\"margin\", 0)\n        // .style(\"word-wrap\", \"break-word\")\n        .style(\"overflow-wrap\", \"break-word\")\n        // .style(\"color\", \"red\")\n        // .html('test test test   test test testtesttesttesttesttesttesttest')\n        .text(() => node.summary)\n\n      // g.append(\"text\")\n      //   .attr(\"x\", node.x + 4)\n      //   // .attr(\"y\", bodyTextY)\n      //   .attr(\"y\", node.y + node.height / 2 + 20)\n      //   .attr(\"class\", \"unselectable\")\n      //   // .attr(\"text-anchor\", \"middle\")\n      //   .text(function () {\n      //     return text;\n      //   })\n      //   .each(function wrap() {\n      //     let self = d3.select(this),\n      //       textLength = self.node().getComputedTextLength(),\n      //       text = self.text();\n      //     while (textLength > node.width - 2 * 4 && text.length > 0) {\n      //       text = text.slice(0, -1);\n      //       self.text(text + \"...\");\n      //       textLength = self.node().getComputedTextLength();\n      //     }\n      //   });\n    },\n  },\n};\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"App.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <h1 class=\"title\">Flowchart Vue</h1>\n    <!-- <h5 class=\"subtitle\">\n      Flowchart & Flowchart designer component for Vue.js.\n    </h5> -->\n    <div id=\"toolbar\">\n      <button\n        @click=\"\n          $refs.chart.add({\n            id: +new Date(),\n            x: 10,\n            y: 10,\n            thumbnail: 'https://placehold.jp/150x100.png',\n            url: '',\n            name: 'Title',\n            summary: 'Summary',\n          })\n        \"\n      >\n        Add(Double-click canvas)\n      </button>\n      <button @click=\"$refs.chart.remove()\">Delete(Del)</button>\n      <button @click=\"$refs.chart.editCurrent()\">\n        Edit(Double-click node)\n      </button>\n      <button @click=\"$refs.chart.save()\">Save</button>\n    </div>\n    <flowchart\n      :nodes=\"nodes\"\n      :connections=\"connections\"\n      @editnode=\"handleEditNode\"\n      :readonly=\"false\"\n      @dblclick=\"handleDblClick\"\n      @editconnection=\"handleEditConnection\"\n      @save=\"handleChartSave\"\n      ref=\"chart\"\n      :render=\"render\"\n    >\n    </flowchart>\n    <node-dialog\n      :visible.sync=\"nodeDialogVisible\"\n      :node.sync=\"nodeForm.target\"\n    ></node-dialog>\n    <connection-dialog\n      :visible.sync=\"connectionDialogVisible\"\n      :connection.sync=\"connectionForm.target\"\n      :operation=\"connectionForm.operation\"\n    >\n    </connection-dialog>\n  </div>\n</template>\n<!-- <script src=\"//d3plus.org/js/d3.js\"></script>\n<script src=\"//d3plus.org/js/d3plus.js\"></script> -->\n<script>\n/* eslint-disable no-unused-vars */\n\nimport ConnectionDialog from \"../components/ConnectionDialog\";\nimport NodeDialog from \"../components/NodeDialog\";\nimport Flowchart from \"../components/flowchart/Flowchart\";\nimport * as d3 from \"d3\";\nimport { roundTo20 } from \"../utils/math\";\n\nexport default {\n  components: {\n    ConnectionDialog,\n    NodeDialog,\n    Flowchart,\n  },\n  data: function () {\n    return {\n      nodes: [\n        {\n          id: 1,\n          x: 200,\n          y: 50,\n          thumbnail: \"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Farticle-ogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3DDocker%25E3%2581%25A8%25E3%2581%25AF%25E3%2581%25A9%25E3%2581%2586%25E3%2581%2584%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2582%25E3%2581%25AE%25E3%2581%25AA%25E3%2581%25AE%25E3%2581%258B%25E3%2580%2581%25E3%2582%2581%25E3%2581%25A1%25E3%2582%2583%25E3%2581%258F%25E3%2581%25A1%25E3%2582%2583%25E4%25B8%2581%25E5%25AF%25A7%25E3%2581%25AB%25E8%25AA%25AC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3Da74a6782c81bee821aa421a1037a1cc0&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540SatoshiSobue%26txt-color%3D%2523333%26txt-font%3DHiragino%2520Sans%2520W6%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Dca9d81597f6bcfd55d58a95dc4c5f445&blend-align=center%2Cmiddle&blend-mode=normal&s=6d406ff15d17893a52ab77ba3ebd9d33\",\n          url: 'https://qiita.com/SatoshiSobue/items/a612ebbb3a9242c09db5',\n          name: \"Dockerとはどういったものなのか、めちゃくちゃ丁寧に説明してみる - Qiita\",\n          summary: \"仮想化などDockerの周辺知識も含めて丁寧に解説されている。\",\n        },\n        {\n          id: 2,\n          x: 200,\n          y: 300,\n          thumbnail: \"https://res.cloudinary.com/practicaldev/image/fetch/s--Zm43GYiy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e4jmzv9o1ivd3yz2kj8a.png\",\n          url: 'https://dev.to/mizuki04/tips-docker-5bfj',\n          name: \"[Tips] 中銀カプセルタワービル=Docker説 - DEV\",\n          summary: \"Dockerの概要が面白い例えで紹介されている。イメージをつかめる。\t\",\n        },\n        // {\n        //   id: 3,\n        //   x: 340,\n        //   y: 130,\n        //   name: \"Custom size\",\n        //   thumbnail: \"operation\",\n        //   approvers: [{ id: 1, name: \"Joyce\" }],\n        //   // width: 120,\n        //   // height: 40,\n        // },\n        {\n          id: 4,\n          x: 50,\n          y: 700,\n          thumbnail: \"https://img-a.udemycdn.com/course/480x270/3207931_c941.jpg\",\n          url: 'https://www.udemy.com/course/aidocker/',\n          name: \"米国AI開発者がゼロから教えるDocker講座\",\n          // approvers: [{ id: 2, name: \"Allen\" }],\n          summary: \"インプットしているだけではわからないので、手を動かして覚える。過去一わかりやすい動画。\t\",\n        },\n        {\n          id: 5,\n          x: 400,\n          y: 700,\n          thumbnail: \"https://i.ytimg.com/vi/Fq1PH0Gwi8I/hqdefault.jpg\",\n          url: 'https://www.youtube.com/watch?v=Fq1PH0Gwi8I',\n          name: \"【rails環境構築】docker + rails + mysql で環境構築（初心者でも30分で完了！）\",\n          // approvers: [{ id: 3, name: \"Teresa\" }],\n          summary: \"無料がいい方はこちら。\t\",\n        },\n      ],\n      connections: [\n        {\n          // positionは矢印がつながっているコネクターの位置っぽい\n          source: { id: 1, position: \"bottom\" },\n          destination: { id: 2, position: \"top\" },\n          id: 1,\n          type: \"pass\",\n          name: \"たとえ話でイメージをつかむ\"\n        },\n        {\n          source: { id: 2, position: \"bottom\" },\n          destination: { id: 4, position: \"top\" },\n          id: 2,\n          type: \"pass\",\n          name: \"実際に手を動かす\"\n        },\n        {\n          source: { id: 2, position: \"bottom\" },\n          destination: { id: 5, position: \"top\" },\n          id: 3,\n          type: \"pass\",\n          name: \"実際に手を動かす\"\n        },\n        // {\n        //   source: { id: 5, position: \"bottom\" },\n        //   destination: { id: 4, position: \"bottom\" },\n        //   id: 4,\n        //   type: \"reject\",\n        // },\n        // {\n        //   source: { id: 1, position: \"top\" },\n        //   destination: { id: 3, position: \"left\" },\n        //   id: 5,\n        //   type: \"pass\",\n        // },\n        // {\n        //   source: { id: 3, position: \"right\" },\n        //   destination: { id: 2, position: \"top\" },\n        //   id: 6,\n        //   type: \"pass\",\n        // },\n      ],\n      nodeForm: { target: null },\n      connectionForm: { target: null, operation: null },\n      nodeDialogVisible: false,\n      connectionDialogVisible: false,\n    };\n  },\n  async mounted() {},\n  methods: {\n    handleDblClick(position) {\n      this.$refs.chart.add({\n        id: +new Date(),\n        x: 10,\n        y: 10,\n        thumbnail: 'https://placehold.jp/150x100.png',\n        url: '',\n        name: 'Title',\n        summary: 'Summary',\n      });\n    },\n    async handleChartSave(nodes, connections) {\n      // axios.post(url, {nodes, connection}).then(resp => {\n      //   this.nodes = resp.nodes;\n      //   this.connections = resp.connections;\n      //   // Flowchart will refresh after this.nodes and this.connections changed\n      // });\n    },\n    handleEditNode(node) {\n      this.nodeForm.target = node;\n      this.nodeDialogVisible = true;\n    },\n    handleEditConnection(connection) {\n      this.connectionForm.target = connection;\n      this.connectionDialogVisible = true;\n    },\n    render: function (g, node, isSelected) {\n      node.width = node.width || 400;\n      node.height = node.height || 200;\n      let borderColor = isSelected ? \"#666666\" : \"#bbbbbb\";\n\n      // // バイト数カウント関数を定義\n      // String.prototype.bytes = function () {\n      //   return(encodeURIComponent(this).replace(/%../g,\"x\").length);\n      // }\n\n      // function leftLinebreak(array){\n      //   let string = \"\";\n      //   array.forEach((t, i) =>{\n      //     string += `<tspan y=\"${i}em\" x=\"0em\">${t}</tspan>`;\n      //     string += `<tspan y=\"${i}em\" x=\"0em\">${t}</tspan>`;\n      //   });\n      //   return string;\n      // }\n\n      // image\n      g.append('foreignObject')\n        .attr(\"x\", node.x)\n        .attr(\"y\", node.y)\n        .style(\"width\", node.width * 3 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .append('xhtml:div')\n        .style(\"width\", node.width * 3 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        // .attr(\"class\", \"imgaaa\")\n        // .style(\"background-image\", \"url('https://res.cloudinary.com/practicaldev/image/fetch/s--Zm43GYiy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e4jmzv9o1ivd3yz2kj8a.png')\")\n        .style(\"background-image\", `url(${node.thumbnail})`)\n        .style(\"background-position\", \"center center\")\n        .style(\"background-size\", \"cover\")\n        .style(\"background-repeat\", \"no-repeat\")\n        .style(\"border-radius\", \"6px 0 0 0\")\n        .style(\"box-sizing\", \"border-box\")\n        // .style(\"border-top\", \"1px solid #7CF8FD\")\n        // .style(\"border-left\", \"1px solid #7CF8FD\")\n        .style(\"border-top\", \"1px solid white\")\n        .style(\"border-left\", \"1px solid white\")\n        // .style(\"background-color\", \"red\")\n        // .append('img')\n        // .attr('src', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Zm43GYiy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e4jmzv9o1ivd3yz2kj8a.png')\n        // .style(\"width\", node.width / 2 + \"px\")\n        // .style(\"height\", node.height / 2 + \"px\")\n        // .text(() => node.name)\n\n      // g.append(\"image\")\n      //   .attr(\"x\", node.x)\n      //   .attr(\"y\", node.y)\n      //   .attr('xlink:href', 'https://res.cloudinary.com/practicaldev/image/fetch/s--Zm43GYiy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e4jmzv9o1ivd3yz2kj8a.png')\n      //   .attr(\"preserveAspectRatio\", \"none\")\n      //   // .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n      //   .style(\"width\", node.width / 2 + \"px\")\n      //   .style(\"height\", node.height / 2 + \"px\")\n\n        //   .attr(\"stroke\", borderColor)\n        //   .attr(\"class\", \"title\")\n        //   .style(\"height\", \"20px\")\n        //   .style(\"fill\", \"#f1f3f4\")\n        //   .style(\"stroke-width\", \"1px\")\n        //   .style(\"width\", node.width + \"px\");\n        // g.append(\"text\")\n        //   .attr(\"x\", node.x + 4)\n        //   .attr(\"y\", node.y + 15)\n        //   .attr(\"class\", \"unselectable\")\n        //   .text(() => node.name)\n        //   .each(function wrap() {\n        //     let self = d3.select(this),\n        //       textLength = self.node().getComputedTextLength(),\n        //       text = self.text();\n        //     while (textLength > node.width - 2 * 4 && text.length > 0) {\n        //       text = text.slice(0, -1);\n        //       self.text(text + \"...\");\n        //       textLength = self.node().getComputedTextLength();\n        //     }\n        // });\n\n      // title\n      // g.append(\"rect\")\n      //   .attr(\"x\", node.x + node.width * 3 / 8)\n      //   .attr(\"y\", node.y)\n      //   .attr(\"stroke\", borderColor)\n      //   .attr(\"class\", \"title\")\n      //   .style(\"height\", node.height / 2 + \"px\")\n      //   .style(\"fill\", \"#f1f3f4\")\n      //   .style(\"fill\", \"#3F3F3F\")\n      //   .style(\"stroke-width\", \"1px\")\n      //   .style(\"width\", node.width * 5 / 8 + \"px\")\n\n      g.append('foreignObject')\n        .attr(\"x\", node.x + node.width * 3 / 8)\n        .attr(\"y\", node.y)\n        .attr(\"class\", \"title\")\n        .style(\"width\", node.width * 5 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .append('xhtml:div')\n        // .append('p')\n        .style(\"width\", node.width * 5 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        // .style(\"background-color\", \"red\")\n        .style(\"background-color\", \"#3F3F3F\")\n        .style(\"border-radius\", \"0 6px 0 0\")\n        .style(\"box-sizing\", \"border-box\")\n        // .style(\"border-top\", \"1px solid #7CF8FD\")\n        // .style(\"border-right\", \"1px solid #7CF8FD\")\n        .style(\"border-top\", \"1px solid white\")\n        .style(\"border-right\", \"1px solid white\")\n\n      g.append('foreignObject')\n        .attr(\"x\", node.x + node.width * 3 / 8)\n        .attr(\"y\", node.y)\n        .attr(\"class\", \"unselectable\")\n        .style(\"width\", node.width * 5 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .style(\"display\", \"table\")\n        .append('xhtml:p')\n        // .append('p')\n        .style(\"display\", \"table-cell\")\n        .style(\"vertical-align\", \"middle\")\n        .style(\"width\", node.width * 5 / 8 + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .style(\"box-sizing\", \"border-box\")\n        .style(\"padding\", \"4px 8px 4px 8px\")\n        .style(\"color\", \"white\")\n        .style(\"font-weight\", \"bold\")\n        .style(\"margin\", 0)\n        // .style(\"word-wrap\", \"break-word\")\n        .style(\"overflow-wrap\", \"break-word\")\n        // .style(\"color\", \"red\")\n        // .html('test test test   test test testtesttesttesttesttesttesttest')\n        .text(() => node.name)\n\n      // Wrap text in a rectangle.\n      // d3plus.textwrap()\n      //   .container(d3.select(\"#rectWrap\"))\n      //   .draw();\n\n      // let textArray = []\n      // let summary = g.append(\"text\")\n      //   .attr(\"x\", node.x + node.width / 2 + 4)\n      //   .attr(\"y\", node.y + 20)\n      //   .attr(\"class\", \"unselectable\")\n      //   .text(() => node.name)\n      //   .each(function wrap() {\n      //     let self = d3.select(this),\n      //       textLength = self.node().getComputedTextLength(),\n      //       text = self.text();\n      //       console.log('bytes: ' + text.bytes());\n      //       textArray = []\n      //       let slicedText\n      //     while (text.bytes() > 16 && text.length > 0) {\n      //       slicedText = text.slice(0, 16);\n      //       textArray.push(text.slice(0, 16));\n      //       text = text.slice(16);\n      //       console.log('textArray: ' + textArray);\n      //       console.log('textArray.length: ' + textArray.length);\n      //       console.log('text: ' + text);\n      //       // self.text(text + \"...\");\n      //       // textLength = self.node().getComputedTextLength();\n      //     }\n      //     // while (textLength > node.width / 2 - 2 * 4 && text.length > 0) {\n      //     //   text = text.slice(0, -1);\n      //     //   self.text(text + \"...\");\n      //     //   textLength = self.node().getComputedTextLength();\n      //     // }\n      //   }\n      //   ).html(leftLinebreak(textArray))\n      //   // ).html('<foreignObject><p>テスト</p></foreignObject>')\n      //   // summary.html(leftLinebreak(textArray))\n\n      // body\n      // if (node.id === 3) {\n      //   let body = g.append(\"ellipse\").attr(\"class\", \"body\");\n      //   body.attr(\"cx\", node.x + node.width / 2);\n      //   body.attr(\"cy\", node.y + node.height / 2);\n      //   body.attr(\"rx\", node.width / 2);\n      //   body.attr(\"ry\", node.height / 2);\n      //   body.style(\"fill\", \"white\");\n      //   body.style(\"stroke-width\", \"1px\");\n      //   body.classed(node.thumbnail, true);\n      //   body.attr(\"stroke\", borderColor);\n      // } else {\n      //   let body = g.append(\"rect\").attr(\"class\", \"body\");\n      //   body\n      //     .style(\"width\", node.width + \"px\")\n      //     .style(\"fill\", \"white\")\n      //     .style(\"stroke-width\", \"1px\")\n      //     .style(\"fill\", \"#3F3F3F\")\n      //   // if (node.type !== \"start\" && node.type !== \"end\") {\n      //     body\n      //       .attr(\"x\", node.x)\n      //       .attr(\"y\", node.y + node.height / 2)\n      //       // .style(\"height\", roundTo20(node.height / 2  - 20) + \"px\");\n      //       .style(\"height\", node.height / 2 + \"px\")\n      //   // } else {\n      //     // body\n      //     //   .attr(\"x\", node.x)\n      //     //   .attr(\"y\", node.y)\n      //     //   .classed(node.type, true)\n      //     //   .attr(\"rx\", 30);\n      //     // body.style(\"height\", roundTo20(node.height) + \"px\");\n      //   // }\n      //   body.attr(\"stroke\", borderColor);\n      // // }\n      g.append('foreignObject')\n        .attr(\"x\", node.x)\n        .attr(\"y\", node.y + node.height / 2)\n        // .attr(\"class\", \"body\")\n        .style(\"width\", node.width + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .append('xhtml:div')\n        // .append('p')\n        .style(\"width\", node.width + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        // .style(\"margin\", 0)\n        .style(\"background-color\", \"#707070\")\n        // .style(\"border-radius\", \"0 4px 0 0\")\n        .style(\"box-sizing\", \"border-box\")\n        .style(\"border-radius\", \"0 0 6px 6px\")\n        // .style(\"border-top\", \"3px solid #6A6A6A\")\n        // .style(\"border-bottom\", \"1px solid #7CF8FD\")\n        // .style(\"border-right\", \"1px solid #7CF8FD\")\n        // .style(\"border-left\", \"1px solid #7CF8FD\")\n        .style(\"border-bottom\", \"1px solid white\")\n        .style(\"border-right\", \"1px solid white\")\n        .style(\"border-left\", \"1px solid white\")\n\n\n      // body text\n      // let text = node.summary\n        // node.type === \"start\"\n        //   ? \"Start\"\n        //   : node.type === \"end\"\n        //   ? \"End\"\n        //   : !node.approvers || node.approvers.length === 0\n        //   ? \"No approver\"\n        //   : node.approvers.length > 1\n        //   ? `${node.approvers[0].name + \"...\"}`\n        //   : node.approvers[0].name;\n      // let bodyTextY;\n      // if (node.type !== \"start\" && node.type !== \"end\") {\n        // if (node.id === 3) {\n        //   bodyTextY = node.y + 25;\n        // } else {\n          // bodyTextY = node.y + 65 + roundTo20(node.height - 20) / 2;\n        // }\n      // } else {\n      //   bodyTextY = node.y + 5 + roundTo20(node.height) / 2;\n      // }\n\n      g.append('foreignObject')\n        .attr(\"x\", node.x)\n        .attr(\"y\", node.y + node.height / 2)\n        .attr(\"class\", \"unselectable\")\n        .style(\"width\", node.width + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .append('xhtml:p')\n        // .append('p')\n        .style(\"width\", node.width + \"px\")\n        .style(\"height\", node.height / 2 + \"px\")\n        .style(\"box-sizing\", \"border-box\")\n        .style(\"padding\", \"4px 8px 4px 8px\")\n        .style(\"color\", \"white\")\n        .style(\"margin\", 0)\n        // .style(\"word-wrap\", \"break-word\")\n        .style(\"overflow-wrap\", \"break-word\")\n        // .style(\"color\", \"red\")\n        // .html('test test test   test test testtesttesttesttesttesttesttest')\n        .text(() => node.summary)\n\n      // g.append(\"text\")\n      //   .attr(\"x\", node.x + 4)\n      //   // .attr(\"y\", bodyTextY)\n      //   .attr(\"y\", node.y + node.height / 2 + 20)\n      //   .attr(\"class\", \"unselectable\")\n      //   // .attr(\"text-anchor\", \"middle\")\n      //   .text(function () {\n      //     return text;\n      //   })\n      //   .each(function wrap() {\n      //     let self = d3.select(this),\n      //       textLength = self.node().getComputedTextLength(),\n      //       text = self.text();\n      //     while (textLength > node.width - 2 * 4 && text.length > 0) {\n      //       text = text.slice(0, -1);\n      //       self.text(text + \"...\");\n      //       textLength = self.node().getComputedTextLength();\n      //     }\n      //   });\n    },\n  },\n};\n</script>\n<style scoped>\n#toolbar {\n  margin-bottom: 10px;\n}\n\n.title {\n  margin-top: 10px;\n  margin-bottom: 0;\n}\n\n.subtitle {\n  margin-bottom: 10px;\n}\n\n#toolbar > button {\n  margin-right: 4px;\n}\n\n.container {\n  /* width: 800px; */\n  width: 96%;\n  margin: auto;\n  height: 80vh;\n}\n</style>\n"]}]}